<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[erikalxq blog]]></title>
  <link href="http://erikalxq.github.io/atom.xml" rel="self"/>
  <link href="http://erikalxq.github.io/"/>
  <updated>2015-08-07T12:40:18+08:00</updated>
  <id>http://erikalxq.github.io/</id>
  <author>
    <name><![CDATA[erikalxq]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx Cache-control]]></title>
    <link href="http://erikalxq.github.io/blog/2015/08/07/nginx-cache-control/"/>
    <updated>2015-08-07T12:28:49+08:00</updated>
    <id>http://erikalxq.github.io/blog/2015/08/07/nginx-cache-control</id>
    <content type="html"><![CDATA[<p>nginx服务器配置网站各类资源的缓存</p>

<p>使用的模块为nginx_http_headers_module</p>

<p>其实就是在nginx的配置文件内，可以在http/sever／location这些模块下添加不同类型站点文件的缓存有效时间，配置值为：expires</p>

<p>实例：</p>

<p>如设置某文件夹内文件的缓存有效值：
location ~ ^/image/{</p>

<pre><code>root /[image所在路径];

expires 1h; # m分钟\h小时\d天(也可以使用add_header Cache-Control 30d)
</code></pre>

<p>}</p>

<p>关于http缓存的参考知识：<a href="http://www.cnblogs.com/futan/archive/2013/04/21/cachehuancun.html">http://www.cnblogs.com/futan/archive/2013/04/21/cachehuancun.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git SSH]]></title>
    <link href="http://erikalxq.github.io/blog/2015/05/30/git-ssh/"/>
    <updated>2015-05-30T22:47:46+08:00</updated>
    <id>http://erikalxq.github.io/blog/2015/05/30/git-ssh</id>
    <content type="html"><![CDATA[<p>Git是可以使用SSH来控制用户访问有效性</p>

<p>一、如何生成SSH呢？</p>

<pre><code>首先设置git的用户：

git config --global user.name "name"

git config --global user.email "name@mail.com"

生成SSH密钥：

查看~/.ssh内是否已经有id _ rsa文件，有代表本地已经有密钥文件了，多服务器多SSH管理后续会提及

如果没有这些文件，则用以下命令，生成密钥文件：

ssh-keygen -t rsa -C “name@mail.com"

.ssh目录下会生成id _ rsa和id _ rsa.pub文件，其中前者为私钥，后者为公钥

如果使用的是github，则需要拷贝.pub文件的内容到github网站上的ssh设置

然后就可以访问github的项目
</code></pre>

<p>如果是自己设置的git服务器，需要将每个使用该git服务的用户将个人的.pub文件发给git管理员，然后执行以下命令添加用户访问权限：</p>

<pre><code>最好建立一个git组，让后再添加一个git用户，并且添加到该组当中。
sudo adduser git
su git
cd ~
mkdir .ssh
在git用户新建一个.ssh的目录，将开发者的SSH公钥添加到git这个用户的authorizedi _ keys这个文件当中。如有zhangsan,lisi两个开发者。
cat /tmp/id _ rsa _ zhangsan.pub &gt;&gt; ~/.ssh/authorized _ keys
cat /tmp/id _ rsa _ lisi.pub &gt;&gt; ~/.ssh/authorized _ keys
</code></pre>

<p>window下可以使用TortoiseGit自带的PuttyGen生成ppk文件,生成ppk需要之前生成的rsa文件(rsa文件是git服务器生成的，这样可以让开发都用同一个密钥和用户访问git服务器，就像我们现在辉腾的服务器)，这样windows用户可以直接在设置TortoiseGit时使用ppk密钥文件访问git服务器</p>

<p>linux和mac，可以使用puttyGen将ppk文件转换为openssh格式文件，其实就是id _ rsa文件</p>

<p>二、多用户访问多台git服务器
设置~/.ssh/config文件：
    Host github.com
    HostName github.com
    User user1
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa.user1</p>

<pre><code>Host github.com
HostName github.com
User user2
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa.user2
</code></pre>

<p>三、SSH简单流程
    密匙认证需要依靠密匙，首先创建一对密匙（包括公匙和密匙，并且用公匙加密的数据只能用密匙解密），并把公匙放到需要远程服务器上。这样当登录远程服务器时，客户端软件就会向服务器发出请求，请求用你的密匙进行认证。服务器收到请求之后，先在你在该服务器的宿主目录下寻找你的公匙，然后检查该公匙是否是合法，如果合法就用公匙加密一随机数（即所谓的challenge）并发送给客户端软件。客户端软件收到 “challenge”之后就用私匙解密再把它发送给服务器。因为用公匙加密的数据只能用密匙解密，服务器经过比较就可以知道该客户连接的合法性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Command - Chsh]]></title>
    <link href="http://erikalxq.github.io/blog/2015/05/25/shell-command-chsh/"/>
    <updated>2015-05-25T23:28:15+08:00</updated>
    <id>http://erikalxq.github.io/blog/2015/05/25/shell-command-chsh</id>
    <content type="html"><![CDATA[<p>更换系统当前shell，可以使用chsh命令。</p>

<p>1、查看当前系统安装的shell类型：cat /etc/shells</p>

<p>2、查看默认shell：echo $SHELL</p>

<p>3、切换shell：chsh -s /bin/zsh</p>

<p>4、查看当前shell的方法：</p>

<pre><code>a、echo $0

b、echo $$，得到进程号；ps -ef | grep [进程号]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://erikalxq.github.io/blog/2015/05/24/hello-octopress/"/>
    <updated>2015-05-24T10:06:15+08:00</updated>
    <id>http://erikalxq.github.io/blog/2015/05/24/hello-octopress</id>
    <content type="html"><![CDATA[<p>hello octopress</p>
]]></content>
  </entry>
  
</feed>
